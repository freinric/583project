counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
summary(model)
new_data <- data.frame(time = 15/6, injections = 3)
predicted_counts <- round(predict(model, newdata = new_data, type = "response"))
cat("Predicted counts: ",floor(predicted_counts))
options(scipen = 0)
reduced_model = glm(counts ~ time, data = mydata, family = poisson)
anova(reduced_model, model, test = "Chisq")
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
a <- coef(model)[1]
b <- coef(model)[2]
c <- coef(model)[3]
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i ,family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
options(scipen = 999)
check = mydata[,-19]
mean = round(sapply(check, mean))
variance = sapply(check, var)
as.data.frame(cbind(mean, variance))
barplot(variance, main = "Variance in data",
xlab = "Columns",ylab = "Variance",
names.arg = colnames(check))
lines(variance, col = "red")
modelq <- glm(counts ~ time + injections, data = mydata, family = quasipoisson)
summary(modelq)
model <- glm(counts ~ time, data = mydata, family = poisson)
a <- coef(model)[1]
b <- coef(model)[2]
c <- coef(model)[3]
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i ,family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i ,family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(sim.glm)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
a <- coef(model)[1]
b <- coef(model)[2]
c <- coef(model)[3]
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
a <- coef(model)[1]
b <- coef(model)[2]
c <- coef(model)[3]
(llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections))))
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
(llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections))))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
data <- read.table("nzbirds.txt", header = TRUE, sep = "\t")
model1 <- glm(status ~ ., data = data, family = binomial)
summary(model1)
AIC(model1)
BIC(model1)
aic_back <- step(model1, direction="backward", trace= FALSE) # by default direction is "backward", trace = TRUE
summary(aic_back)
AIC(aic_back)
BIC(aic_back)
bic_back <- step(model1, k = log(nrow(data)), trace = FALSE) # by default direction is "backward"
summary(bic_back)
AIC(bic_back)
BIC(bic_back)
model.empty = glm(status ~ 1, data = data, family = binomial) # need to start with intercept only
aic_forward = step(model.empty, direction = "forward", scope = list(lower = model.empty, upper = model1), trace=FALSE)
summary(aic_forward)
AIC(aic_forward)
BIC(aic_forward)
model.empty = glm(status ~ 1, data = data, family = binomial) # need to start with intercept only
bic_forward <- step(model.empty, direction = "forward", k=log(nrow(data)), scope = list(lower = model.empty, upper = model1), trace=FALSE)
summary(bic_forward)
AIC(bic_forward)
BIC(bic_forward)
bestfit = glm(status ~ b + d + e + j + m, data = data, family = binomial)
summary(bestfit)
aircraft <- read.table("aircraft.txt", header = TRUE, sep = "\t")
model <- glm(y ~ ., data = aircraft, family = poisson)
summary(model)
# x1 = aircraft
# x2 = bomb load (tons)
# x3 = crew experience (months)
library(ggplot2)
par(mfrow=c(1,2))
ggplot(aircraft, aes(x = factor(x1), y = x2)) +
geom_boxplot() +
xlab("Aircraft Type") +
ylab("Bomb Load (tons)") +
ggtitle("Bomb Load vs Aircraft Type")
ggplot(aircraft, aes(x = factor(x1), y = x3)) +
geom_boxplot() +
xlab("Aircraft Type") +
ylab("Aircrew Experience (months)") +
ggtitle("Aircrew Experience vs Aircraft Type")
# Fit the full model with x1 and x3
full_model <- glm(y ~ x1 + x3, data = aircraft, family = poisson)
# Fit the reduced model with only intercept and x3
x1_only <- glm(y ~ x3, data = aircraft, family = poisson)
# Fit the reduced model with only intercept and x1
x3_only <- glm(y ~ x1, data = aircraft, family = poisson)
# reduced model considering x1 only
lrt_x1<-as.numeric(-2*(logLik(x1_only)-logLik(full_model)))
pchisq(lrt_x1,1,lower=FALSE)
# reduced model considering x3 only
lrt_x3<-as.numeric(-2*(logLik(x3_only)-logLik(full_model)))
pchisq(lrt_x3,1,lower=FALSE)
mydata <- read.table("ACF.txt", header = TRUE, sep = ",")
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
summary(model)
new_data <- data.frame(time = 15/6, injections = 3)
predicted_counts <- round(predict(model, newdata = new_data, type = "response"))
cat("Predicted counts: ",floor(predicted_counts))
options(scipen = 0)
reduced_model = glm(counts ~ time, data = mydata, family = poisson)
anova(reduced_model, model, test = "Chisq")
# model <- glm(counts ~ time + injections, data = mydata, family = poisson)
# a <- coef(model)[1]
# b <- coef(model)[2]
# c <- coef(model)[3]
# (llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections))))
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
options(scipen = 999)
check = mydata[,-19]
mean = round(sapply(check, mean))
variance = sapply(check, var)
as.data.frame(cbind(mean, variance))
barplot(variance, main = "Variance in data",
xlab = "Columns",ylab = "Variance",
names.arg = colnames(check))
lines(variance, col = "red")
modelq <- glm(counts ~ time + injections, data = mydata, family = quasipoisson)
summary(modelq)
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=20) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
aircraft <- read.table("aircraft.txt", header = TRUE, sep = "\t")
model <- glm(y ~ ., data = aircraft, family = poisson)
summary(model)
# x1 = aircraft
# x2 = bomb load (tons)
# x3 = crew experience (months)
summary(full_model)
library(ggplot2)
ggplot(aircraft, aes(x=x1, y=y, fill=as.factor(x1))) +
geom_boxplot() +
labs(title = "Damage by Aircraft Type",
x = "Aircraft Type",
y = "Number of Locations Damaged") +
scale_fill_discrete(name="Aircraft Type",
labels=c("A-4", "A-6"))
library(ggplot2)
ggplot(aircraft, aes(x=x1, y=y, fill=as.factor(x1))) +
geom_boxplot() +
labs(title = "Damage to Aircraft",
x = "Aircraft Type",
y = "Number of Locations Damaged") +
scale_fill_discrete(name="Aircraft Type",
labels=c("A-4", "A-6"))
(a <- coef(reduced_model)[1])
(b <- coef(reduced_model)[2])
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
(a <- coef(model)[1])
(b <- coef(model)[2])
(c <- coef(model)[3])
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
(a <- coef(model)[1])
(b <- coef(model)[2])
(c <- coef(model)[3])
counts = mydata$AC1
injections = mydata$INJ
time = mydata$T
model <- glm(counts ~ time + injections, data = mydata, family = poisson)
simloglike <- function(t, i, dummy_model, N=10) {
ll <- matrix(0, ncol=length(t), nrow=N)
for (j in 1:N) {
y <- simulate(dummy_model)$sim_1
sim.glm <- glm(y ~ t+i , family = poisson)
a <- coef(sim.glm)[1]
b <- coef(sim.glm)[2]
c <- coef(model)[3]
loglikelihoodValues <- log(dpois(y, lambda = exp(a + b*t + c*i)))
ll[j, ] <- loglikelihoodValues
}
ll <- data.frame(ll) #names(ll) <- as.character(t)
names(ll) <- ""
ll
}
llikelihoodValues <- log(dpois(counts, lambda = exp(a + b*time + c*injections)))
simlike <- simloglike(time, injections, model)
par(mar=c(1, 4, .1, .1))
boxplot(simlike, ylim=range(c(llikelihoodValues, range(simlike)) ))
points(llikelihoodValues, pch=16, col=2)
day = read.csv("Bike-Sharing-Dataset//day.csv", header = TRUE)
# day = read.csv("Bike-Sharing-Dataset//day.csv", header = TRUE)
# myday = day
# head(myday)
getwd()
setwd("C:\Users\vjsng\Data583\583project")
setwd("C:\\Users\\vjsng\\Data583\\583project")
# day = read.csv("Bike-Sharing-Dataset//day.csv", header = TRUE)
# myday = day
setwd("C:\\Users\\vjsng\\Data583\\583project\\Bike-Sharing-Dataset")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# setwd("C:\\Users\\vjsng\\Data583\\583project\\Bike-Sharing-Dataset")
head(day)
m(cnt ~ ., data = myhour)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
head(day,1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
dim(day)
source("~/.active-rstudio-document", echo=TRUE)
set.seed(4314876)
x <- runif(200000)
y <- 3*x + rnorm(200000)
xsamps <- split(x, ceiling(seq_along(x) / 200))
ysamps <- split(y, ceiling(seq_along(y) / 200))
plot(ysamps[[1]]~xsamps[[1]])
# plot(ysamps[[1]]~xsamps[[1]])
xsamps
# plot(ysamps[[1]]~xsamps[[1]])
dm(xsamps)
# plot(ysamps[[1]]~xsamps[[1]])
dim(xsamps)
train_indices <- sample(nrow(day), round(0.8*nrow(day)), replace = FALSE)
train_data <- bike_data[train_indices, ]
train_indices <- sample(nrow(day), round(0.8*nrow(day)), replace = FALSE)
train_data <- day[train_indices, ]
test_data <- day[-train_indices, ]
modelh <- lm(cnt ~ ., data = train_hour)
train_indices <- sample(nrow(day), round(0.8*nrow(day)), replace = FALSE)
train_hour <- day[train_indices, ]
test_hour <- day[-train_indices, ]
modelh <- lm(cnt ~ ., data = train_hour)
summary(modelh)
head(train_hour)
day = read.csv("day.csv", header = TRUE)
hour = read.csv("hour.csv", header = TRUE)
day$dteday = as.Date(day$dteday, format = "%Y-%m-%d") # converting 'dteday' column to date
hour$dteday = as.Date(hour$dteday, format = "%Y-%m-%d") # converting 'dteday' column to date
day = read.csv("day.csv", header = TRUE)
hour = read.csv("hour.csv", header = TRUE)
day$dteday = as.Date(day$dteday, format = "%Y-%m-%d") # converting 'dteday' column to date
hour$dteday = as.Date(hour$dteday, format = "%Y-%m-%d") # converting 'dteday' column to date
train_indices <- sample(nrow(day), round(0.8*nrow(day)), replace = FALSE)
train_hour <- day[train_indices, ]
test_hour <- day[-train_indices, ]
head(train_hour)
str(train_hour)
modelh <- lm(cnt ~ ., data = train_hour)
summary(modelh)
model <- lm(cnt ~ workingday + casual + registered, data = train_hour)
summary(model)
bich <- step(modelh, k = log(nrow(train_hour)), trace = FALSE) # by default direction is "backward"
summary(bich)
AIC(bich)
BIC(bich)
plot(modelh)
# Predict values using the test data
predictions <- predict(modelh, newdata = test_data)
predictions <- predict(modelh, newdata = test_hour)
# Calculate the accuracy of the model using the test data
accuracy <- sqrt(mean((predictions - test_hour$cnt)^2))
# Print the accuracy
cat("Accuracy of the model:", round(accuracy, 2))
sample(1:200, 100)
x <- runif(200000)
y <- 3*x + rnorm(200000)
split(x, ceiling(seq_along(x) / 200))
split(day, ceiling(seq_along(day) / 100))
predictions <- predict(modelh, newdata = test_hour)
mse <- mean((predictions - test_data$cnt)^2)
predictions <- predict(modelh, newdata = test_hour)
mse <- mean((predictions - test_hour$cnt)^2)
cat("MSE of the model:", round(mse, 2))
train_indices <- sample(nrow(day), round(0.8*nrow(day)), replace = FALSE)
train80 <- day[train_indices, ]
test80 <- day[-train_indices, ]
modelh <- lm(cnt ~ ., data = train80)
summary(modelh)
predictions <- predict(modelh, newdata = test80)
mse <- mean((predictions - test80$cnt)^2)
cat("MSE of the model:", round(mse, 2))
train_indices <- sample(nrow(day), round(0.7*nrow(day)), replace = FALSE)
train70 <- day[train_indices, ]
test70 <- day[-train_indices, ]
modelh <- lm(cnt ~ ., data = train70)
summary(modelh)
predictions <- predict(modelh, newdata = test70)
mse <- mean((predictions - test70$cnt)^2)
cat("MSE of the model:", round(mse, 2))
train_indices <- sample(nrow(day), round(0.5*nrow(day)), replace = FALSE)
train50 <- day[train_indices, ]
test50 <- day[-train_indices, ]
modelh <- lm(cnt ~ ., data = train50)
summary(modelh)
predictions <- predict(modelh, newdata = test50)
mse50 <- mean((predictions - test50$cnt)^2)
cat("MSE of the model:", round(mse, 2))
